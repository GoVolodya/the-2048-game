{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $197cd56b15c33885$var$RESTART_BUTTON_TEXT = \"Restart\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Game.DEFAULT_STATE;\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.initialState = initialState;\n        this.state = this.deepCloneArray(this.initialState);\n        this.setStatus();\n        this.setScore();\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var checkMoves = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                if (this.getStatus() !== Game.STATUS_PLAYING) return;\n                var result = this.deepCloneArray(Game.DEFAULT_STATE);\n                for(var row = 0; row < this.state.length; row++){\n                    var rowValues = [];\n                    for(var col = 0; col < this.state[row].length; col++)if (this.state[row][col] !== 0) rowValues.push(this.state[row][col]);\n                    var combinedValues = [];\n                    while(rowValues.length > 0){\n                        var value = rowValues.shift();\n                        if (rowValues.length > 0 && value === rowValues[0]) {\n                            var combinedValue = value * 2;\n                            if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                            combinedValues.push(combinedValue);\n                            rowValues.shift();\n                        } else combinedValues.push(value);\n                    }\n                    var column = 0;\n                    while(combinedValues.length > 0){\n                        result[row][column] = combinedValues.shift();\n                        column++;\n                    }\n                }\n                if (!this.compareArrays(this.state, result)) {\n                    if (checkMoves) return true;\n                    this.state = result;\n                    this.checkForWin();\n                    this.populateEmptyCell();\n                }\n                if (checkMoves) return false;\n                if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) this.gameOver();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var checkMoves = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                if (this.getStatus() !== Game.STATUS_PLAYING) return;\n                var result = this.deepCloneArray(Game.DEFAULT_STATE);\n                for(var row = 0; row < this.state.length; row++){\n                    var rowValues = [];\n                    for(var col = 0; col < this.state[row].length; col++)if (this.state[row][col] !== 0) rowValues.push(this.state[row][col]);\n                    var combinedValues = [];\n                    while(rowValues.length > 0){\n                        var value = rowValues.pop();\n                        if (rowValues.length > 0 && value === rowValues[rowValues.length - 1]) {\n                            var combinedValue = value * 2;\n                            if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                            combinedValues.push(combinedValue);\n                            rowValues.pop();\n                        } else combinedValues.push(value);\n                    }\n                    var column = this.state[row].length - 1;\n                    while(combinedValues.length > 0){\n                        result[row][column] = combinedValues.shift();\n                        column--;\n                    }\n                }\n                if (!this.compareArrays(this.state, result)) {\n                    if (checkMoves) return true;\n                    this.state = result;\n                    this.checkForWin();\n                    this.populateEmptyCell();\n                }\n                if (checkMoves) return false;\n                if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) this.gameOver();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var checkMoves = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                if (this.getStatus() !== Game.STATUS_PLAYING) return;\n                var result = this.deepCloneArray(Game.DEFAULT_STATE);\n                for(var col = 0; col < this.state.length; col++){\n                    var columnValues = [];\n                    // eslint-disable-next-line no-shadow\n                    for(var row = 0; row < this.state[col].length; row++)if (this.state[row][col] !== 0) columnValues.push(this.state[row][col]);\n                    var combinedValues = [];\n                    while(columnValues.length > 0){\n                        var value = columnValues.shift();\n                        if (columnValues.length > 0 && value === columnValues[0]) {\n                            var combinedValue = value * 2;\n                            if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                            combinedValues.push(combinedValue);\n                            columnValues.shift();\n                        } else combinedValues.push(value);\n                    }\n                    var row1 = 0;\n                    while(combinedValues.length > 0){\n                        result[row1][col] = combinedValues.shift();\n                        row1++;\n                    }\n                }\n                if (!this.compareArrays(this.state, result)) {\n                    if (checkMoves) return true;\n                    this.state = result;\n                    this.checkForWin();\n                    this.populateEmptyCell();\n                }\n                if (checkMoves) return false;\n                if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) this.gameOver();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var checkMoves = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                if (this.getStatus() !== Game.STATUS_PLAYING) return;\n                var result = this.deepCloneArray(Game.DEFAULT_STATE);\n                for(var col = 0; col < this.state.length; col++){\n                    var columnValues = [];\n                    // eslint-disable-next-line no-shadow\n                    for(var row = 0; row < this.state[col].length; row++)if (this.state[row][col] !== 0) columnValues.push(this.state[row][col]);\n                    var combinedValues = [];\n                    while(columnValues.length > 0){\n                        var value = columnValues.pop();\n                        if (columnValues.length > 0 && value === columnValues[columnValues.length - 1]) {\n                            var combinedValue = value * 2;\n                            if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                            combinedValues.push(combinedValue);\n                            columnValues.pop();\n                        } else combinedValues.push(value);\n                    }\n                    var row1 = this.state.length - 1;\n                    while(combinedValues.length > 0){\n                        result[row1][col] = combinedValues.shift();\n                        row1--;\n                    }\n                }\n                if (!this.compareArrays(this.state, result)) {\n                    if (checkMoves) return true;\n                    this.state = result;\n                    this.checkForWin();\n                    this.populateEmptyCell();\n                }\n                if (checkMoves) return false;\n                if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) this.gameOver();\n            }\n        },\n        {\n            /**\n   * Get current game score.\n   *\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * Set current game score.\n   *\n   * @param score\n   */ key: \"setScore\",\n            value: function setScore() {\n                var score = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n                this.score = score;\n            }\n        },\n        {\n            /**\n   * Get current game state.\n   *\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Set current game state.\n   */ key: \"setState\",\n            value: function setState() {\n                var newState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Game.DEFAULT_STATE;\n                this.state = newState;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Setter for the game status.\n   *\n   * @param gameStatus\n   */ key: \"setStatus\",\n            value: function setStatus() {\n                var gameStatus = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Game.STATUS_IDLE;\n                this.status = gameStatus;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.setStatus(Game.STATUS_PLAYING);\n                this.setScore();\n                this.populateEmptyCells();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.setScore();\n                this.setStatus();\n                this.state = this.deepCloneArray(this.initialState);\n                if (this.compareArrays(this.initialState, Game.DEFAULT_STATE)) this.populateEmptyCells();\n            }\n        },\n        {\n            /**\n   * Check if newly populated number should be 4 with 10% chance.\n   *\n   * @returns {boolean}\n   */ key: \"isFour\",\n            value: function isFour() {\n                return Math.random() < 0.1;\n            }\n        },\n        {\n            /**\n   * Creates a new number for empty cell.\n   *\n   * @returns {number}\n   */ key: \"getNewEmptyCellNumber\",\n            value: function getNewEmptyCellNumber() {\n                return this.isFour() ? 4 : 2;\n            }\n        },\n        {\n            /**\n   * Get an array of empty cells.\n   *\n   * @returns {*[]}\n   */ key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                var emptyCells = [];\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                return emptyCells;\n            }\n        },\n        {\n            /**\n   * Populate single empty cell.\n   */ key: \"populateEmptyCell\",\n            value: function populateEmptyCell() {\n                var emptyCells = this.getEmptyCells();\n                var randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n                var row = emptyCells[randomEmptyCell][0];\n                var column = emptyCells[randomEmptyCell][1];\n                this.state[row][column] = this.getNewEmptyCellNumber();\n            }\n        },\n        {\n            /**\n   * Populate two empty cells.\n   */ key: \"populateEmptyCells\",\n            value: function populateEmptyCells() {\n                for(var i = 1; i <= 2; i++)this.populateEmptyCell();\n            }\n        },\n        {\n            /**\n   * Check if both arrays have the same values.\n   *\n   * @param arr1\n   * @param arr2\n   * @returns {boolean}\n   */ key: \"compareArrays\",\n            value: function compareArrays(arr1, arr2) {\n                for(var i = 0; i < arr1.length; i++)for(var j = 0; j < arr1[i].length; j++){\n                    if (typeof arr2[i][j] !== \"undefined\" && arr1[i][j] === arr2[i][j]) continue;\n                    return false;\n                }\n                return true;\n            }\n        },\n        {\n            /**\n   * Check if there are other possible moves.\n   *\n   * @returns {boolean}\n   */ key: \"hasOtherMoves\",\n            value: function hasOtherMoves() {\n                return this.moveDown(true) || this.moveUp(true) || this.moveLeft(true) || this.moveRight(true);\n            }\n        },\n        {\n            /**\n   * The game over.\n   */ key: \"gameOver\",\n            value: function gameOver() {\n                this.setStatus(Game.STATUS_LOSE);\n            }\n        },\n        {\n            /**\n   * The game won.\n   */ key: \"gameWon\",\n            value: function gameWon() {\n                this.setStatus(Game.STATUS_WIN);\n            }\n        },\n        {\n            /**\n   * Check if any cell on the field has reached the win number.\n   */ key: \"checkForWin\",\n            value: function checkForWin() {\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] === Game.WIN_NUMBER) {\n                        this.gameWon();\n                        break;\n                    }\n                }\n            }\n        },\n        {\n            /**\n   * Deep clone milty-dimensional array to prevent original array changes.\n   *\n   * @param array\n   * @returns {*}\n   */ key: \"deepCloneArray\",\n            value: function deepCloneArray(array) {\n                return array.map(function(item) {\n                    return item.slice();\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"WIN_NUMBER\", 2048);\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_PLAYING\", \"playing\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_IDLE\", \"idle\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_LOSE\", \"lose\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_WIN\", \"win\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"DEFAULT_STATE\", [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function(e) {\n    if (e.target.textContent === $197cd56b15c33885$var$RESTART_BUTTON_TEXT) $197cd56b15c33885$var$game.restart();\n    else {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startButton.textContent = $197cd56b15c33885$var$RESTART_BUTTON_TEXT;\n        $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n    }\n    $197cd56b15c33885$var$loseBanner();\n    $197cd56b15c33885$var$wonBanner();\n    $197cd56b15c33885$var$drowState();\n    $197cd56b15c33885$var$drawScore();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$game.getStatus() === $3d28d7f1aac198f5$exports.STATUS_IDLE) $197cd56b15c33885$var$game.setStatus($3d28d7f1aac198f5$exports.STATUS_PLAYING);\n    if ($197cd56b15c33885$var$game.getStatus() !== $3d28d7f1aac198f5$exports.STATUS_PLAYING) return;\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        default:\n            break;\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === $3d28d7f1aac198f5$exports.STATUS_LOSE) {\n        $197cd56b15c33885$var$loseBanner(true);\n        $197cd56b15c33885$var$wonBanner();\n    }\n    if ($197cd56b15c33885$var$game.getStatus() === $3d28d7f1aac198f5$exports.STATUS_WIN) {\n        $197cd56b15c33885$var$wonBanner(true);\n        $197cd56b15c33885$var$loseBanner();\n    }\n    $197cd56b15c33885$var$drowState();\n    $197cd56b15c33885$var$drawScore();\n    $197cd56b15c33885$var$checkMoves();\n});\nfunction $197cd56b15c33885$var$drowState() {\n    var state = $197cd56b15c33885$var$game.getState();\n    var table = document.querySelector(\".game-field\");\n    for(var i = 0; i < state.length; i++)for(var j = 0; j < 4; j++){\n        var cell = table.rows[i].cells[j];\n        var classes = cell.className.split(/\\s/);\n        var newClasses = classes.filter(function(cls) {\n            return !cls.startsWith(\"field-cell--\");\n        });\n        cell.className = newClasses.join(\" \");\n        if (state[i][j] === 0) cell.textContent = \"\";\n        else {\n            cell.classList.add(\"field-cell--\".concat(state[i][j]));\n            cell.textContent = state[i][j];\n        }\n    }\n}\nfunction $197cd56b15c33885$var$drawScore() {\n    var scoreBoard = document.querySelector(\".game-score\");\n    scoreBoard.textContent = $197cd56b15c33885$var$game.getScore().toString();\n}\nfunction $197cd56b15c33885$var$checkMoves() {\n    if (!$197cd56b15c33885$var$game.hasOtherMoves()) {\n        $197cd56b15c33885$var$game.gameOver();\n        $197cd56b15c33885$var$loseBanner(true);\n        $197cd56b15c33885$var$wonBanner();\n    }\n}\nfunction $197cd56b15c33885$var$loseBanner() {\n    var show = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    var banner = document.querySelector(\".message-lose\");\n    if (show) banner.classList.remove(\"hidden\");\n    else banner.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$wonBanner() {\n    var show = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    var banner = document.querySelector(\".message-win\");\n    if (show) banner.classList.remove(\"hidden\");\n    else banner.classList.add(\"hidden\");\n}\n\n})();\n//# sourceMappingURL=index.a8809216.js.map\n","'use strict';\n\nconst RESTART_BUTTON_TEXT = 'Restart';\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', (e) => {\n  if (e.target.textContent === RESTART_BUTTON_TEXT) {\n    game.restart();\n  } else {\n    game.start();\n    startButton.textContent = RESTART_BUTTON_TEXT;\n    startMessage.classList.add('hidden');\n  }\n\n  loseBanner();\n  wonBanner();\n  drowState();\n  drawScore();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === Game.STATUS_IDLE) {\n    game.setStatus(Game.STATUS_PLAYING);\n  }\n\n  if (game.getStatus() !== Game.STATUS_PLAYING) {\n    return;\n  }\n\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    default:\n      break;\n  }\n\n  if (game.getStatus() === Game.STATUS_LOSE) {\n    loseBanner(true);\n    wonBanner();\n  }\n\n  if (game.getStatus() === Game.STATUS_WIN) {\n    wonBanner(true);\n    loseBanner();\n  }\n\n  drowState();\n  drawScore();\n  checkMoves();\n});\n\nfunction drowState() {\n  const state = game.getState();\n  const table = document.querySelector('.game-field');\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = 0; j < 4; j++) {\n      const cell = table.rows[i].cells[j];\n      const classes = cell.className.split(/\\s/);\n      const newClasses = classes.filter(\n        (cls) => !cls.startsWith('field-cell--'),\n      );\n\n      cell.className = newClasses.join(' ');\n\n      if (state[i][j] === 0) {\n        cell.textContent = '';\n      } else {\n        cell.classList.add(`field-cell--${state[i][j]}`);\n        cell.textContent = state[i][j];\n      }\n    }\n  }\n}\n\nfunction drawScore() {\n  const scoreBoard = document.querySelector('.game-score');\n\n  scoreBoard.textContent = game.getScore().toString();\n}\n\nfunction checkMoves() {\n  if (!game.hasOtherMoves()) {\n    game.gameOver();\n    loseBanner(true);\n    wonBanner();\n  }\n}\n\nfunction loseBanner(show = false) {\n  const banner = document.querySelector('.message-lose');\n\n  if (show) {\n    banner.classList.remove('hidden');\n  } else {\n    banner.classList.add('hidden');\n  }\n}\n\nfunction wonBanner(show = false) {\n  const banner = document.querySelector('.message-win');\n\n  if (show) {\n    banner.classList.remove('hidden');\n  } else {\n    banner.classList.add('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static WIN_NUMBER = 2048;\n  static STATUS_PLAYING = 'playing';\n  static STATUS_IDLE = 'idle';\n  static STATUS_LOSE = 'lose';\n  static STATUS_WIN = 'win';\n  static DEFAULT_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = Game.DEFAULT_STATE) {\n    this.initialState = initialState;\n    this.state = this.deepCloneArray(this.initialState);\n    this.setStatus();\n    this.setScore();\n  }\n\n  moveLeft(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const rowValues = [];\n\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] !== 0) {\n          rowValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (rowValues.length > 0) {\n        const value = rowValues.shift();\n\n        if (rowValues.length > 0 && value === rowValues[0]) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          rowValues.shift();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let column = 0;\n\n      while (combinedValues.length > 0) {\n        result[row][column] = combinedValues.shift();\n        column++;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  moveRight(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const rowValues = [];\n\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] !== 0) {\n          rowValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (rowValues.length > 0) {\n        const value = rowValues.pop();\n\n        if (rowValues.length > 0 && value === rowValues[rowValues.length - 1]) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          rowValues.pop();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let column = this.state[row].length - 1;\n\n      while (combinedValues.length > 0) {\n        result[row][column] = combinedValues.shift();\n        column--;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  moveUp(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let col = 0; col < this.state.length; col++) {\n      const columnValues = [];\n\n      // eslint-disable-next-line no-shadow\n      for (let row = 0; row < this.state[col].length; row++) {\n        if (this.state[row][col] !== 0) {\n          columnValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (columnValues.length > 0) {\n        const value = columnValues.shift();\n\n        if (columnValues.length > 0 && value === columnValues[0]) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          columnValues.shift();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let row = 0;\n\n      while (combinedValues.length > 0) {\n        result[row][col] = combinedValues.shift();\n        row++;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  moveDown(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let col = 0; col < this.state.length; col++) {\n      const columnValues = [];\n\n      // eslint-disable-next-line no-shadow\n      for (let row = 0; row < this.state[col].length; row++) {\n        if (this.state[row][col] !== 0) {\n          columnValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (columnValues.length > 0) {\n        const value = columnValues.pop();\n\n        if (\n          columnValues.length > 0\n          && value === columnValues[columnValues.length - 1]\n        ) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          columnValues.pop();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let row = this.state.length - 1;\n\n      while (combinedValues.length > 0) {\n        result[row][col] = combinedValues.shift();\n        row--;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  /**\n   * Get current game score.\n   *\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Set current game score.\n   *\n   * @param score\n   */\n  setScore(score = 0) {\n    this.score = score;\n  }\n\n  /**\n   * Get current game state.\n   *\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Set current game state.\n   */\n  setState(newState = Game.DEFAULT_STATE) {\n    this.state = newState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Setter for the game status.\n   *\n   * @param gameStatus\n   */\n  setStatus(gameStatus = Game.STATUS_IDLE) {\n    this.status = gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.setStatus(Game.STATUS_PLAYING);\n    this.setScore();\n    this.populateEmptyCells();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.setScore();\n    this.setStatus();\n    this.state = this.deepCloneArray(this.initialState);\n\n    if (this.compareArrays(this.initialState, Game.DEFAULT_STATE)) {\n      this.populateEmptyCells();\n    }\n  }\n\n  /**\n   * Check if newly populated number should be 4 with 10% chance.\n   *\n   * @returns {boolean}\n   */\n  isFour() {\n    return Math.random() < 0.1;\n  }\n\n  /**\n   * Creates a new number for empty cell.\n   *\n   * @returns {number}\n   */\n  getNewEmptyCellNumber() {\n    return this.isFour() ? 4 : 2;\n  }\n\n  /**\n   * Get an array of empty cells.\n   *\n   * @returns {*[]}\n   */\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  /**\n   * Populate single empty cell.\n   */\n  populateEmptyCell() {\n    const emptyCells = this.getEmptyCells();\n    const randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n    const row = emptyCells[randomEmptyCell][0];\n    const column = emptyCells[randomEmptyCell][1];\n\n    this.state[row][column] = this.getNewEmptyCellNumber();\n  }\n\n  /**\n   * Populate two empty cells.\n   */\n  populateEmptyCells() {\n    for (let i = 1; i <= 2; i++) {\n      this.populateEmptyCell();\n    }\n  }\n\n  /**\n   * Check if both arrays have the same values.\n   *\n   * @param arr1\n   * @param arr2\n   * @returns {boolean}\n   */\n  compareArrays(arr1, arr2) {\n    for (let i = 0; i < arr1.length; i++) {\n      for (let j = 0; j < arr1[i].length; j++) {\n        if (typeof arr2[i][j] !== 'undefined' && arr1[i][j] === arr2[i][j]) {\n          continue;\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if there are other possible moves.\n   *\n   * @returns {boolean}\n   */\n  hasOtherMoves() {\n    return (\n      this.moveDown(true)\n      || this.moveUp(true)\n      || this.moveLeft(true)\n      || this.moveRight(true)\n    );\n  }\n\n  /**\n   * The game over.\n   */\n  gameOver() {\n    this.setStatus(Game.STATUS_LOSE);\n  }\n\n  /**\n   * The game won.\n   */\n  gameWon() {\n    this.setStatus(Game.STATUS_WIN);\n  }\n\n  /**\n   * Check if any cell on the field has reached the win number.\n   */\n  checkForWin() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === Game.WIN_NUMBER) {\n          this.gameWon();\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Deep clone milty-dimensional array to prevent original array changes.\n   *\n   * @param array\n   * @returns {*}\n   */\n  deepCloneArray(array) {\n    return array.map((item) => item.slice());\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["$197cd56b15c33885$var$RESTART_BUTTON_TEXT","$3d28d7f1aac198f5$exports","$cd5a47cf8ef6d766$export$1e71eb4bef00f6b0","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","length","DEFAULT_STATE","instance","Constructor","TypeError","state","deepCloneArray","setStatus","setScore","checkMoves","getStatus","STATUS_PLAYING","result","row","rowValues","col","push","combinedValues","shift","combinedValue","getScore","column","compareArrays","checkForWin","populateEmptyCell","hasOtherMoves","STATUS_WIN","gameOver","pop","columnValues","row1","score","newState","status","gameStatus","STATUS_IDLE","populateEmptyCells","Math","random","isFour","emptyCells","i","j","getEmptyCells","randomEmptyCell","floor","getNewEmptyCellNumber","arr1","arr2","moveDown","moveUp","moveLeft","moveRight","STATUS_LOSE","WIN_NUMBER","gameWon","array","map","item","slice","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","prototype","$197cd56b15c33885$var$game","$197cd56b15c33885$var$startButton","document","querySelector","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$drowState","getState","table","cell","rows","cells","newClasses","classes","className","split","filter","cls","startsWith","join","textContent","classList","add","concat","$197cd56b15c33885$var$drawScore","scoreBoard","toString","$197cd56b15c33885$var$loseBanner","show","banner","remove","$197cd56b15c33885$var$wonBanner","addEventListener","e","restart","start","preventDefault"],"version":3,"file":"index.a8809216.js.map"}