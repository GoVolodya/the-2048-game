{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $09e991522ca7e64e$var$RESTART_BUTTON_TEXT = \"Restart\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static WIN_NUMBER = 2048;\n    static STATUS_PLAYING = \"playing\";\n    static STATUS_IDLE = \"idle\";\n    static STATUS_LOSE = \"lose\";\n    static STATUS_WIN = \"win\";\n    static DEFAULT_STATE = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = $a5fd07fa01589658$var$Game.DEFAULT_STATE){\n        this.initialState = initialState;\n        this.state = this.deepCloneArray(this.initialState);\n        this.setStatus();\n        this.setScore();\n    }\n    moveLeft(checkMoves = false) {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_PLAYING) return;\n        const result = this.deepCloneArray($a5fd07fa01589658$var$Game.DEFAULT_STATE);\n        for(let row = 0; row < this.state.length; row++){\n            const rowValues = [];\n            for(let col = 0; col < this.state[row].length; col++)if (this.state[row][col] !== 0) rowValues.push(this.state[row][col]);\n            const combinedValues = [];\n            while(rowValues.length > 0){\n                const value = rowValues.shift();\n                if (rowValues.length > 0 && value === rowValues[0]) {\n                    const combinedValue = value * 2;\n                    if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                    combinedValues.push(combinedValue);\n                    rowValues.shift();\n                } else combinedValues.push(value);\n            }\n            let column = 0;\n            while(combinedValues.length > 0){\n                result[row][column] = combinedValues.shift();\n                column++;\n            }\n        }\n        if (!this.compareArrays(this.state, result)) {\n            if (checkMoves) return true;\n            this.state = result;\n            this.checkForWin();\n            this.populateEmptyCell();\n        }\n        if (checkMoves) return false;\n        if (!this.hasOtherMoves() && this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_WIN) this.gameOver();\n    }\n    moveRight(checkMoves = false) {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_PLAYING) return;\n        const result = this.deepCloneArray($a5fd07fa01589658$var$Game.DEFAULT_STATE);\n        for(let row = 0; row < this.state.length; row++){\n            const rowValues = [];\n            for(let col = 0; col < this.state[row].length; col++)if (this.state[row][col] !== 0) rowValues.push(this.state[row][col]);\n            const combinedValues = [];\n            while(rowValues.length > 0){\n                const value = rowValues.pop();\n                if (rowValues.length > 0 && value === rowValues[rowValues.length - 1]) {\n                    const combinedValue = value * 2;\n                    if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                    combinedValues.push(combinedValue);\n                    rowValues.pop();\n                } else combinedValues.push(value);\n            }\n            let column = this.state[row].length - 1;\n            while(combinedValues.length > 0){\n                result[row][column] = combinedValues.shift();\n                column--;\n            }\n        }\n        if (!this.compareArrays(this.state, result)) {\n            if (checkMoves) return true;\n            this.state = result;\n            this.checkForWin();\n            this.populateEmptyCell();\n        }\n        if (checkMoves) return false;\n        if (!this.hasOtherMoves() && this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_WIN) this.gameOver();\n    }\n    moveUp(checkMoves = false) {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_PLAYING) return;\n        const result = this.deepCloneArray($a5fd07fa01589658$var$Game.DEFAULT_STATE);\n        for(let col = 0; col < this.state.length; col++){\n            const columnValues = [];\n            // eslint-disable-next-line no-shadow\n            for(let row = 0; row < this.state[col].length; row++)if (this.state[row][col] !== 0) columnValues.push(this.state[row][col]);\n            const combinedValues = [];\n            while(columnValues.length > 0){\n                const value = columnValues.shift();\n                if (columnValues.length > 0 && value === columnValues[0]) {\n                    const combinedValue = value * 2;\n                    if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                    combinedValues.push(combinedValue);\n                    columnValues.shift();\n                } else combinedValues.push(value);\n            }\n            let row = 0;\n            while(combinedValues.length > 0){\n                result[row][col] = combinedValues.shift();\n                row++;\n            }\n        }\n        if (!this.compareArrays(this.state, result)) {\n            if (checkMoves) return true;\n            this.state = result;\n            this.checkForWin();\n            this.populateEmptyCell();\n        }\n        if (checkMoves) return false;\n        if (!this.hasOtherMoves() && this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_WIN) this.gameOver();\n    }\n    moveDown(checkMoves = false) {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_PLAYING) return;\n        const result = this.deepCloneArray($a5fd07fa01589658$var$Game.DEFAULT_STATE);\n        for(let col = 0; col < this.state.length; col++){\n            const columnValues = [];\n            // eslint-disable-next-line no-shadow\n            for(let row = 0; row < this.state[col].length; row++)if (this.state[row][col] !== 0) columnValues.push(this.state[row][col]);\n            const combinedValues = [];\n            while(columnValues.length > 0){\n                const value = columnValues.pop();\n                if (columnValues.length > 0 && value === columnValues[columnValues.length - 1]) {\n                    const combinedValue = value * 2;\n                    if (!checkMoves) this.setScore(this.getScore() + combinedValue);\n                    combinedValues.push(combinedValue);\n                    columnValues.pop();\n                } else combinedValues.push(value);\n            }\n            let row = this.state.length - 1;\n            while(combinedValues.length > 0){\n                result[row][col] = combinedValues.shift();\n                row--;\n            }\n        }\n        if (!this.compareArrays(this.state, result)) {\n            if (checkMoves) return true;\n            this.state = result;\n            this.checkForWin();\n            this.populateEmptyCell();\n        }\n        if (checkMoves) return false;\n        if (!this.hasOtherMoves() && this.getStatus() !== $a5fd07fa01589658$var$Game.STATUS_WIN) this.gameOver();\n    }\n    /**\n   * Get current game score.\n   *\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * Set current game score.\n   *\n   * @param score\n   */ setScore(score = 0) {\n        this.score = score;\n    }\n    /**\n   * Get current game state.\n   *\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Set current game state.\n   */ setState(newState = $a5fd07fa01589658$var$Game.DEFAULT_STATE) {\n        this.state = newState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Setter for the game status.\n   *\n   * @param gameStatus\n   */ setStatus(gameStatus = $a5fd07fa01589658$var$Game.STATUS_IDLE) {\n        this.status = gameStatus;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.setStatus($a5fd07fa01589658$var$Game.STATUS_PLAYING);\n        this.setScore();\n        this.populateEmptyCells();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.setScore();\n        this.setStatus();\n        this.state = this.deepCloneArray(this.initialState);\n        if (this.compareArrays(this.initialState, $a5fd07fa01589658$var$Game.DEFAULT_STATE)) this.populateEmptyCells();\n    }\n    /**\n   * Check if newly populated number should be 4 with 10% chance.\n   *\n   * @returns {boolean}\n   */ isFour() {\n        return Math.random() < 0.1;\n    }\n    /**\n   * Creates a new number for empty cell.\n   *\n   * @returns {number}\n   */ getNewEmptyCellNumber() {\n        return this.isFour() ? 4 : 2;\n    }\n    /**\n   * Get an array of empty cells.\n   *\n   * @returns {*[]}\n   */ getEmptyCells() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        return emptyCells;\n    }\n    /**\n   * Populate single empty cell.\n   */ populateEmptyCell() {\n        const emptyCells = this.getEmptyCells();\n        const randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n        const row = emptyCells[randomEmptyCell][0];\n        const column = emptyCells[randomEmptyCell][1];\n        this.state[row][column] = this.getNewEmptyCellNumber();\n    }\n    /**\n   * Populate two empty cells.\n   */ populateEmptyCells() {\n        for(let i = 1; i <= 2; i++)this.populateEmptyCell();\n    }\n    /**\n   * Check if both arrays have the same values.\n   *\n   * @param arr1\n   * @param arr2\n   * @returns {boolean}\n   */ compareArrays(arr1, arr2) {\n        for(let i = 0; i < arr1.length; i++)for(let j = 0; j < arr1[i].length; j++){\n            if (typeof arr2[i][j] !== \"undefined\" && arr1[i][j] === arr2[i][j]) continue;\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Check if there are other possible moves.\n   *\n   * @returns {boolean}\n   */ hasOtherMoves() {\n        return this.moveDown(true) || this.moveUp(true) || this.moveLeft(true) || this.moveRight(true);\n    }\n    /**\n   * The game over.\n   */ gameOver() {\n        this.setStatus($a5fd07fa01589658$var$Game.STATUS_LOSE);\n    }\n    /**\n   * The game won.\n   */ gameWon() {\n        this.setStatus($a5fd07fa01589658$var$Game.STATUS_WIN);\n    }\n    /**\n   * Check if any cell on the field has reached the win number.\n   */ checkForWin() {\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === $a5fd07fa01589658$var$Game.WIN_NUMBER) {\n                this.gameWon();\n                break;\n            }\n        }\n    }\n    /**\n   * Deep clone milty-dimensional array to prevent original array changes.\n   *\n   * @param array\n   * @returns {*}\n   */ deepCloneArray(array) {\n        return array.map((item)=>item.slice());\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", (e)=>{\n    if (e.target.textContent === $09e991522ca7e64e$var$RESTART_BUTTON_TEXT) $09e991522ca7e64e$var$game.restart();\n    else {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.textContent = $09e991522ca7e64e$var$RESTART_BUTTON_TEXT;\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$loseBanner();\n    $09e991522ca7e64e$var$wonBanner();\n    $09e991522ca7e64e$var$drowState();\n    $09e991522ca7e64e$var$drawScore();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS_IDLE) $09e991522ca7e64e$var$game.setStatus($a5fd07fa01589658$exports.STATUS_PLAYING);\n    if ($09e991522ca7e64e$var$game.getStatus() !== $a5fd07fa01589658$exports.STATUS_PLAYING) return;\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        default:\n            break;\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS_LOSE) {\n        $09e991522ca7e64e$var$loseBanner(true);\n        $09e991522ca7e64e$var$wonBanner();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS_WIN) {\n        $09e991522ca7e64e$var$wonBanner(true);\n        $09e991522ca7e64e$var$loseBanner();\n    }\n    $09e991522ca7e64e$var$drowState();\n    $09e991522ca7e64e$var$drawScore();\n    $09e991522ca7e64e$var$checkMoves();\n});\nfunction $09e991522ca7e64e$var$drowState() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const table = document.querySelector(\".game-field\");\n    for(let i = 0; i < state.length; i++)for(let j = 0; j < 4; j++){\n        const cell = table.rows[i].cells[j];\n        const classes = cell.className.split(/\\s/);\n        const newClasses = classes.filter((cls)=>!cls.startsWith(\"field-cell--\"));\n        cell.className = newClasses.join(\" \");\n        if (state[i][j] === 0) cell.textContent = \"\";\n        else {\n            cell.classList.add(`field-cell--${state[i][j]}`);\n            cell.textContent = state[i][j];\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$drawScore() {\n    const scoreBoard = document.querySelector(\".game-score\");\n    scoreBoard.textContent = $09e991522ca7e64e$var$game.getScore().toString();\n}\nfunction $09e991522ca7e64e$var$checkMoves() {\n    if (!$09e991522ca7e64e$var$game.hasOtherMoves()) {\n        $09e991522ca7e64e$var$game.gameOver();\n        $09e991522ca7e64e$var$loseBanner(true);\n        $09e991522ca7e64e$var$wonBanner();\n    }\n}\nfunction $09e991522ca7e64e$var$loseBanner(show = false) {\n    const banner = document.querySelector(\".message-lose\");\n    if (show) banner.classList.remove(\"hidden\");\n    else banner.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$wonBanner(show = false) {\n    const banner = document.querySelector(\".message-win\");\n    if (show) banner.classList.remove(\"hidden\");\n    else banner.classList.add(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.16677deb.js.map\n","'use strict';\n\nconst RESTART_BUTTON_TEXT = 'Restart';\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', (e) => {\n  if (e.target.textContent === RESTART_BUTTON_TEXT) {\n    game.restart();\n  } else {\n    game.start();\n    startButton.textContent = RESTART_BUTTON_TEXT;\n    startMessage.classList.add('hidden');\n  }\n\n  loseBanner();\n  wonBanner();\n  drowState();\n  drawScore();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === Game.STATUS_IDLE) {\n    game.setStatus(Game.STATUS_PLAYING);\n  }\n\n  if (game.getStatus() !== Game.STATUS_PLAYING) {\n    return;\n  }\n\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    default:\n      break;\n  }\n\n  if (game.getStatus() === Game.STATUS_LOSE) {\n    loseBanner(true);\n    wonBanner();\n  }\n\n  if (game.getStatus() === Game.STATUS_WIN) {\n    wonBanner(true);\n    loseBanner();\n  }\n\n  drowState();\n  drawScore();\n  checkMoves();\n});\n\nfunction drowState() {\n  const state = game.getState();\n  const table = document.querySelector('.game-field');\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = 0; j < 4; j++) {\n      const cell = table.rows[i].cells[j];\n      const classes = cell.className.split(/\\s/);\n      const newClasses = classes.filter(\n        (cls) => !cls.startsWith('field-cell--'),\n      );\n\n      cell.className = newClasses.join(' ');\n\n      if (state[i][j] === 0) {\n        cell.textContent = '';\n      } else {\n        cell.classList.add(`field-cell--${state[i][j]}`);\n        cell.textContent = state[i][j];\n      }\n    }\n  }\n}\n\nfunction drawScore() {\n  const scoreBoard = document.querySelector('.game-score');\n\n  scoreBoard.textContent = game.getScore().toString();\n}\n\nfunction checkMoves() {\n  if (!game.hasOtherMoves()) {\n    game.gameOver();\n    loseBanner(true);\n    wonBanner();\n  }\n}\n\nfunction loseBanner(show = false) {\n  const banner = document.querySelector('.message-lose');\n\n  if (show) {\n    banner.classList.remove('hidden');\n  } else {\n    banner.classList.add('hidden');\n  }\n}\n\nfunction wonBanner(show = false) {\n  const banner = document.querySelector('.message-win');\n\n  if (show) {\n    banner.classList.remove('hidden');\n  } else {\n    banner.classList.add('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static WIN_NUMBER = 2048;\n  static STATUS_PLAYING = 'playing';\n  static STATUS_IDLE = 'idle';\n  static STATUS_LOSE = 'lose';\n  static STATUS_WIN = 'win';\n  static DEFAULT_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = Game.DEFAULT_STATE) {\n    this.initialState = initialState;\n    this.state = this.deepCloneArray(this.initialState);\n    this.setStatus();\n    this.setScore();\n  }\n\n  moveLeft(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const rowValues = [];\n\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] !== 0) {\n          rowValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (rowValues.length > 0) {\n        const value = rowValues.shift();\n\n        if (rowValues.length > 0 && value === rowValues[0]) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          rowValues.shift();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let column = 0;\n\n      while (combinedValues.length > 0) {\n        result[row][column] = combinedValues.shift();\n        column++;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  moveRight(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const rowValues = [];\n\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] !== 0) {\n          rowValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (rowValues.length > 0) {\n        const value = rowValues.pop();\n\n        if (rowValues.length > 0 && value === rowValues[rowValues.length - 1]) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          rowValues.pop();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let column = this.state[row].length - 1;\n\n      while (combinedValues.length > 0) {\n        result[row][column] = combinedValues.shift();\n        column--;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  moveUp(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let col = 0; col < this.state.length; col++) {\n      const columnValues = [];\n\n      // eslint-disable-next-line no-shadow\n      for (let row = 0; row < this.state[col].length; row++) {\n        if (this.state[row][col] !== 0) {\n          columnValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (columnValues.length > 0) {\n        const value = columnValues.shift();\n\n        if (columnValues.length > 0 && value === columnValues[0]) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          columnValues.shift();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let row = 0;\n\n      while (combinedValues.length > 0) {\n        result[row][col] = combinedValues.shift();\n        row++;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  moveDown(checkMoves = false) {\n    if (this.getStatus() !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    const result = this.deepCloneArray(Game.DEFAULT_STATE);\n\n    for (let col = 0; col < this.state.length; col++) {\n      const columnValues = [];\n\n      // eslint-disable-next-line no-shadow\n      for (let row = 0; row < this.state[col].length; row++) {\n        if (this.state[row][col] !== 0) {\n          columnValues.push(this.state[row][col]);\n        }\n      }\n\n      const combinedValues = [];\n\n      while (columnValues.length > 0) {\n        const value = columnValues.pop();\n\n        if (\n          columnValues.length > 0\n          && value === columnValues[columnValues.length - 1]\n        ) {\n          const combinedValue = value * 2;\n\n          if (!checkMoves) {\n            this.setScore(this.getScore() + combinedValue);\n          }\n\n          combinedValues.push(combinedValue);\n          columnValues.pop();\n        } else {\n          combinedValues.push(value);\n        }\n      }\n\n      let row = this.state.length - 1;\n\n      while (combinedValues.length > 0) {\n        result[row][col] = combinedValues.shift();\n        row--;\n      }\n    }\n\n    if (!this.compareArrays(this.state, result)) {\n      if (checkMoves) {\n        return true;\n      }\n\n      this.state = result;\n      this.checkForWin();\n      this.populateEmptyCell();\n    }\n\n    if (checkMoves) {\n      return false;\n    }\n\n    if (!this.hasOtherMoves() && this.getStatus() !== Game.STATUS_WIN) {\n      this.gameOver();\n    }\n  }\n\n  /**\n   * Get current game score.\n   *\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Set current game score.\n   *\n   * @param score\n   */\n  setScore(score = 0) {\n    this.score = score;\n  }\n\n  /**\n   * Get current game state.\n   *\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Set current game state.\n   */\n  setState(newState = Game.DEFAULT_STATE) {\n    this.state = newState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Setter for the game status.\n   *\n   * @param gameStatus\n   */\n  setStatus(gameStatus = Game.STATUS_IDLE) {\n    this.status = gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.setStatus(Game.STATUS_PLAYING);\n    this.setScore();\n    this.populateEmptyCells();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.setScore();\n    this.setStatus();\n    this.state = this.deepCloneArray(this.initialState);\n\n    if (this.compareArrays(this.initialState, Game.DEFAULT_STATE)) {\n      this.populateEmptyCells();\n    }\n  }\n\n  /**\n   * Check if newly populated number should be 4 with 10% chance.\n   *\n   * @returns {boolean}\n   */\n  isFour() {\n    return Math.random() < 0.1;\n  }\n\n  /**\n   * Creates a new number for empty cell.\n   *\n   * @returns {number}\n   */\n  getNewEmptyCellNumber() {\n    return this.isFour() ? 4 : 2;\n  }\n\n  /**\n   * Get an array of empty cells.\n   *\n   * @returns {*[]}\n   */\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  /**\n   * Populate single empty cell.\n   */\n  populateEmptyCell() {\n    const emptyCells = this.getEmptyCells();\n    const randomEmptyCell = Math.floor(Math.random() * emptyCells.length);\n    const row = emptyCells[randomEmptyCell][0];\n    const column = emptyCells[randomEmptyCell][1];\n\n    this.state[row][column] = this.getNewEmptyCellNumber();\n  }\n\n  /**\n   * Populate two empty cells.\n   */\n  populateEmptyCells() {\n    for (let i = 1; i <= 2; i++) {\n      this.populateEmptyCell();\n    }\n  }\n\n  /**\n   * Check if both arrays have the same values.\n   *\n   * @param arr1\n   * @param arr2\n   * @returns {boolean}\n   */\n  compareArrays(arr1, arr2) {\n    for (let i = 0; i < arr1.length; i++) {\n      for (let j = 0; j < arr1[i].length; j++) {\n        if (typeof arr2[i][j] !== 'undefined' && arr1[i][j] === arr2[i][j]) {\n          continue;\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if there are other possible moves.\n   *\n   * @returns {boolean}\n   */\n  hasOtherMoves() {\n    return (\n      this.moveDown(true)\n      || this.moveUp(true)\n      || this.moveLeft(true)\n      || this.moveRight(true)\n    );\n  }\n\n  /**\n   * The game over.\n   */\n  gameOver() {\n    this.setStatus(Game.STATUS_LOSE);\n  }\n\n  /**\n   * The game won.\n   */\n  gameWon() {\n    this.setStatus(Game.STATUS_WIN);\n  }\n\n  /**\n   * Check if any cell on the field has reached the win number.\n   */\n  checkForWin() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === Game.WIN_NUMBER) {\n          this.gameWon();\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Deep clone milty-dimensional array to prevent original array changes.\n   *\n   * @param array\n   * @returns {*}\n   */\n  deepCloneArray(array) {\n    return array.map((item) => item.slice());\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$RESTART_BUTTON_TEXT","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","WIN_NUMBER","STATUS_PLAYING","STATUS_IDLE","STATUS_LOSE","STATUS_WIN","DEFAULT_STATE","constructor","initialState","state","deepCloneArray","setStatus","setScore","moveLeft","checkMoves","getStatus","result","row","length","rowValues","col","push","combinedValues","value","shift","combinedValue","getScore","column","compareArrays","checkForWin","populateEmptyCell","hasOtherMoves","gameOver","moveRight","pop","moveUp","columnValues","moveDown","score","getState","setState","newState","status","gameStatus","start","populateEmptyCells","restart","isFour","Math","random","getNewEmptyCellNumber","getEmptyCells","emptyCells","i","j","randomEmptyCell","floor","arr1","arr2","gameWon","array","map","item","slice","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$drowState","table","cell","rows","cells","newClasses","classes","className","split","filter","cls","startsWith","join","textContent","classList","add","$09e991522ca7e64e$var$drawScore","scoreBoard","toString","$09e991522ca7e64e$var$loseBanner","show","banner","remove","$09e991522ca7e64e$var$wonBanner","addEventListener","e","target","preventDefault","key"],"version":3,"file":"index.16677deb.js.map"}